// –ì–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ
document.addEventListener("DOMContentLoaded", ()=> {
    const year = new Date().getFullYear();
    const yearElement = document.getElementById("current-year");
    if (yearElement) {
        yearElement.textContent = year;
    }
});

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ header
document.addEventListener("DOMContentLoaded", () => {
    const modal           = document.getElementById("modal-form");
    const overlay         = document.getElementById("overlay");
    const openModalButton = document.querySelector(".header__form");
    const closeModalButton= document.querySelector(".close-modal");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ –±—É—Ä–≥–µ—Ä
    const nav    = document.querySelector(".header__nav");
    const burger = document.querySelector(".burger");

    openModalButton.addEventListener("click", () => {
      // 1) –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (nav.classList.contains("header__nav--open")) {
            nav.classList.remove("header__nav--open");
            burger.setAttribute("aria-expanded", "false");
        }
      // 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∫–∞–∫ –±—ã–ª–æ
        modal.classList.add("show");
        overlay.classList.add("show");
    });

    closeModalButton.addEventListener("click", () => {
        modal.classList.remove("show");
        overlay.classList.remove("show");
    });

    overlay.addEventListener("click", () => {
        modal.classList.remove("show");
        overlay.classList.remove("show");
    });
});

// –§–∞—Å—Ç—Ñ—É–¥
document.addEventListener('DOMContentLoaded', () => {
    const burger       = document.querySelector('.burger');
    const nav          = document.querySelector('.header__nav');
    const closeNavBtn  = document.querySelector('.nav-close');
    const navLinks     = document.querySelectorAll('.header__page-link');

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é
    function toggleNav() {
        const isOpen = burger.getAttribute('aria-expanded') === 'true';
        burger.setAttribute('aria-expanded', String(!isOpen));
        nav.classList.toggle('header__nav--open');
    }

    burger.addEventListener('click', toggleNav);
    closeNavBtn.addEventListener('click', toggleNav);

    // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª—é–±—É—é —Å—Å—ã–ª–∫—É ‚Äî —Ç–æ–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (nav.classList.contains('header__nav--open')) {
                toggleNav();
            }
        });
    });
});

// –ê–Ω–∏–º–∞—à–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å interspector
const elements = document.querySelectorAll('.hidden');
const elements2 = document.querySelectorAll('.hidden-2');
const elements3 = document.querySelectorAll('.hidden-3');

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target);
        }
    });
},
{ threshold: 0.2 });

elements.forEach(el => observer.observe(el));

const observer2 = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
            setTimeout(() => {
            entry.target.classList.add('visible-2');
            observer2.unobserve(entry.target);
        }, index * 200);
        }
    });
},
{ threshold: 0.2 });

elements2.forEach(el => observer2.observe(el));

const observer3 = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
            setTimeout(() => {
            entry.target.classList.add('visible-3');
            observer3.unobserve(entry.target);
        }, index * 200);
        }
    });
},
{ threshold: 0.2 });

elements3.forEach(el => observer3.observe(el));

// –¢—Ä–µ–∫–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
// 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –ª—é–±—É—é —Ñ–æ—Ä–º—É
document.querySelectorAll('form input, form textarea').forEach(el => {
    el.addEventListener('input', () => {
    ym(101927491, 'reachGoal', 'form_start');
    }, 
    { once: true });
});
// 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
document.querySelector('.modal-form')?.addEventListener('submit', () => {
    ym(101927491, 'reachGoal', 'form_submit_header');
});
// 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É –≤ –±–ª–æ–∫–µ feedback
document.querySelector('.feedback-block__form')?.addEventListener('submit', () => {
    ym(101927491, 'reachGoal', 'form_submit_feedback');
});


// TG Bot —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
function collectClientData() {
    const now = new Date();
    return {
        date: now.toLocaleDateString('ru-RU'),
        time: now.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        }),
        device: /Mobi|Android/i.test(navigator.userAgent) ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø',
        screen: `${window.innerWidth}px`,
        lang: (navigator.language || navigator.userLanguage).toUpperCase(),
        userAgent: navigator.userAgent.replace(/</g, '&lt;').replace(/>/g, '&gt;').slice(0, 400),
        utm: {
            source: new URLSearchParams(window.location.search).get('utm_source') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç–∫–µ',
            medium: new URLSearchParams(window.location.search).get('utm_medium') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç–∫–µ',
            campaign: new URLSearchParams(window.location.search).get('utm_campaign') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç–∫–µ'
        }
    };
}
function buildMessage(info, label, value) {
    return `${label} <b>${value}</b> –Ω–∞ —Å–∞–π—Ç–µ <b>Future Trade!</b>

üìÖ <b>–î–∞—Ç–∞:</b> ${info.date}
üïí <b>–í—Ä–µ–º—è:</b> ${info.time}
üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${info.device}
üñ• <b>–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞:</b> ${info.screen}
üåç <b>–Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞:</b> ${info.lang}

üîó <b>UTM Source:</b> ${info.utm.source}
üîó <b>UTM Medium:</b> ${info.utm.medium}
üîó <b>UTM Campaign:</b> ${info.utm.campaign}

üß† <b>–ë—Ä–∞—É–∑–µ—Ä:</b>
<code>${info.userAgent}</code>`;
}

document.querySelectorAll('.messenger-link').forEach(link => {
    link.addEventListener('click', function(event) {
        event.preventDefault();
        const messengerName = this.dataset.messenger;
        const info = collectClientData();
        const message = buildMessage(info, 'üîî –ü–µ—Ä–µ—Ö–æ–¥ –≤', messengerName);

        fetch('notify.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({message})
        })
        .then(response => response.text())
        .then(result => {
            console.log(result);
            window.location.href = this.href;
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
    });
});
document.querySelectorAll('a[href^="tel:"]').forEach(link => {
    link.addEventListener('click', function(event) {
        const phoneNumber = this.getAttribute('href').replace('tel:', '');
        const info = collectClientData();
        const message = buildMessage(info, 'üìû –ö–ª–∏–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', phoneNumber);

        fetch('notify.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({message})
        });
    });
});
document.querySelectorAll('a[href^="mailto:"]').forEach(link => {
    link.addEventListener('click', function(event) {
        const emailAddress = this.getAttribute('href').replace('mailto:', '');
        const info = collectClientData();
        const message = buildMessage(info, '‚úâÔ∏è –ö–ª–∏–∫ –ø–æ –ø–æ—á—Ç–µ:', emailAddress);

        fetch('notify.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({message})
        });
    });
});

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
document.addEventListener('DOMContentLoaded', function() {
    const dropdown = document.querySelector('.lang-dropdown');

    dropdown.addEventListener('click', function(event) {
        event.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª document click
        dropdown.classList.toggle('active');
    });

    document.addEventListener('click', function(event) {
    // –µ—Å–ª–∏ –∫–ª–∏–∫ –≤–Ω–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (!dropdown.contains(event.target)) {
            dropdown.classList.remove('active');
        }
    });
});